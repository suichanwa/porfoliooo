---
import BaseLayout from "../layouts/BaseLayout.astro";
import TypeWriter from "../components/TypeWriter.tsx";

// Create a function to import markdown files dynamically
// This is an async function that will read all markdown files from the directory
async function importDiaryEntries() {
  // Use Astro's import.meta.glob to get all markdown files
  const markdownFiles = import.meta.glob('../content/diary/*.md');
  const entries = [];

  for (const path in markdownFiles) {
    const module = await markdownFiles[path]();
    const filename = path.split('/').pop().replace('.md', '');
    
    // Extract metadata and content from the markdown file
    const { frontmatter, Content } = module;

    // Add entry with metadata from frontmatter
    entries.push({
      id: filename.toLowerCase().replace(/\s+/g, '-'), // Generate ID from filename
      title: frontmatter.title || "Untitled Entry",
      date: new Date(frontmatter.date || Date.now()),
      content: Content, // This is the rendered markdown content component
      mood: frontmatter.mood || "neutral",
      coverImage: frontmatter.coverImage,
      tags: frontmatter.tags || []
    });
  }

  // Sort entries by date (newest first)
  return entries.sort((a, b) => b.date.getTime() - a.date.getTime());
}

// Get all diary entries
const diaryEntries = await importDiaryEntries();

// Get the entry ID from the URL or use the first entry
const urlParams = new URL(Astro.request.url).searchParams;
const currentEntryId = urlParams.get('entry') || diaryEntries[0]?.id || "";
---

<BaseLayout title="My Diary | My Portfolio">
  <section class="relative py-12 px-4">
    <!-- Side panel navigation (moved to left side) -->
    <div class="fixed top-24 left-0 z-20 transition-all duration-300" id="sidebar">
      <div class="bg-base-200 rounded-r-lg shadow-md overflow-hidden flex">
        <!-- Collapsed sidebar for mobile (always visible) -->
        <div class="w-10 md:hidden flex flex-col items-center py-4 bg-secondary-bg">
          <button id="expand-sidebar" class="mb-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" style="color: var(--primary-accent)">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
          <div class="writing-mode-vertical text-xs font-medium" style="color: var(--primary-accent)">Diary Entries</div>
          <div class="mt-4 flex flex-col space-y-3">
            {diaryEntries.map((entry, index) => (
              <a 
                href={`?entry=${entry.id}#${entry.id}`}
                class={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                  currentEntryId === entry.id
                    ? "bg-base-300 hover:bg-base-100"
                    : "bg-base-300 hover:bg-base-100"
                }`}
                style={currentEntryId === entry.id ? 
                  `background-color: var(--primary-accent); color: var(--base-100);` : 
                  ``}
              >
                {index + 1}
              </a>
            ))}
          </div>
        </div>
        
        <!-- Full sidebar (default on desktop, expandable on mobile) -->
        <div class="w-64 hidden md:block" id="expanded-sidebar">
          <div class="bg-secondary-bg py-3 px-4 border-b border-base-300 flex justify-between items-center">
            <h3 class="font-medium" style="color: var(--primary-accent)">Diary Entries</h3>
            <button id="collapse-sidebar" class="md:hidden">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" style="color: var(--primary-accent)">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
              </svg>
            </button>
          </div>
          
          <div class="max-h-[70vh] overflow-y-auto p-2">
            <ul class="space-y-1">
              {diaryEntries.map(entry => (
                <li>
                  <a 
                    href={`?entry=${entry.id}#${entry.id}`} 
                    class={`block px-3 py-2 rounded-md text-sm transition ${
                      currentEntryId === entry.id
                        ? "hover:bg-base-300"
                        : "hover:bg-base-300"
                    }`}
                    style={currentEntryId === entry.id ? 
                      `background-color: rgba(var(--primary-accent-rgb), 0.2); color: var(--primary-accent);` : 
                      ``}
                  >
                    <div class="font-medium mb-1">{entry.title}</div>
                    <div class="text-xs opacity-70">{entry.date.toLocaleDateString("en-US", { month: "short", day: "numeric", year: "numeric" })}</div>
                    {entry.tags && entry.tags.length > 0 && (
                      <div class="flex flex-wrap gap-1 mt-1">
                        {entry.tags.slice(0, 2).map(tag => (
                          <span class="text-xs bg-base-300 px-1.5 py-0.5 rounded">{tag}</span>
                        ))}
                        {entry.tags.length > 2 && <span class="text-xs">+{entry.tags.length - 2}</span>}
                      </div>
                    )}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>
    
    <div class="max-w-3xl mx-auto md:ml-64">
      <div data-scroll class="opacity-0 text-center">
        <h1 class="text-3xl md:text-4xl font-bold text-center mb-6 min-h-[3.5rem]">
          <TypeWriter 
            client:load 
            text="My Developer Diary" 
            speed={100} 
            delay={300}
          />
        </h1>
        <div class="w-24 h-1 mx-auto mb-8" style="background-color: var(--primary-accent)"></div>
        
        <p class="text-base-content/70 mb-12">
          Personal thoughts, learnings, and reflections on my journey as a developer.
        </p>
      </div>
      
      <div data-scroll data-scroll-delay="0.2" class="opacity-0 mt-8">
        {diaryEntries.map((entry, index) => {
          const currentEntry = diaryEntries.find(e => e.id === currentEntryId) || diaryEntries[0];
          return (
            <div 
              id={entry.id} 
              data-entry-index={index}
              data-entry-id={entry.id}
              class={`diary-entry-content ${currentEntryId === entry.id ? "" : "hidden"}`}
            >
              <article class="diary-entry bg-base-200 rounded-xl shadow-lg overflow-hidden mb-8">
                {entry.coverImage && (
                  <div class="w-full h-64 relative">
                    <img 
                      src={entry.coverImage} 
                      alt={`Cover for ${entry.title}`} 
                      class="w-full h-full object-cover" 
                    />
                    <div class="absolute inset-0 bg-gradient-to-t from-base-200 to-transparent"></div>
                  </div>
                )}
                
                <div class="p-8">
                  <div class="flex justify-between items-center mb-4">
                    <time class="text-sm text-base-content/70">
                      {entry.date.toLocaleDateString("en-US", { 
                        weekday: "long", 
                        month: "long", 
                        day: "numeric", 
                        year: "numeric" 
                      })}
                    </time>
                    {entry.mood && (
                      <div class="text-2xl" title={`Mood: ${entry.mood}`}>
                        {entry.mood === "happy" ? "üòä" :
                         entry.mood === "creative" ? "üí°" :
                         entry.mood === "reflective" ? "ü§î" :
                         entry.mood === "excited" ? "ü§©" :
                         "üòê"}
                      </div>
                    )}
                  </div>
                  
                  <h2 class="text-2xl md:text-3xl font-bold mb-6" style="color: var(--primary-accent)">{entry.title}</h2>
                  
                  <div class="diary-content text-lg">
                    <entry.content />
                  </div>
                  
                  {entry.tags && entry.tags.length > 0 && (
                    <div class="flex flex-wrap gap-2 mt-6 pt-4 border-t border-base-300">
                      {entry.tags.map(tag => (
                        <span class="px-3 py-1 bg-base-300 text-sm rounded-full" style="color: var(--secondary-accent)">
                          #{tag}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              </article>
            </div>
          )
        })}

        {diaryEntries.length === 0 && (
          <div class="text-center p-12 bg-base-200 rounded-xl">
            <p class="text-xl text-base-content/70">No diary entries yet. Check back soon!</p>
          </div>
        )}
      </div>
    </div>
  </section>

  <script>
    // Animation for the content
    document.addEventListener('DOMContentLoaded', () => {
      // Sidebar mobile toggle functionality
      const expandButton = document.getElementById('expand-sidebar');
      const collapseButton = document.getElementById('collapse-sidebar');
      const expandedSidebar = document.getElementById('expanded-sidebar');
      
      expandButton?.addEventListener('click', () => {
        expandedSidebar?.classList.remove('hidden');
      });
      
      collapseButton?.addEventListener('click', () => {
        if (window.innerWidth < 768) {
          expandedSidebar?.classList.add('hidden');
        }
      });
      
      // Handle window resize
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 768) {
          expandedSidebar?.classList.remove('hidden');
        }
      });

      const scrollElements = document.querySelectorAll('[data-scroll]');
      
      setTimeout(() => {
        scrollElements.forEach(el => {
          el.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
          el.style.opacity = '1';
          el.style.transform = 'translateY(0)';
        });
      }, 100);
      
      // Add scroll animations for diary entries
      const entries = document.querySelectorAll('[data-entry-index]');
      
      const observerOptions = {
        root: null,
        threshold: 0.1,
        rootMargin: '0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
          }
        });
      }, observerOptions);
      
      entries.forEach(entry => {
        observer.observe(entry);
      });
    });
  </script>
</BaseLayout>

<style is:global>
  /* Custom styling for markdown content - FIXED VERSION */
  .diary-content {
    @apply prose max-w-none;
  }
  
  .diary-content h1, 
  .diary-content h2, 
  .diary-content h3, 
  .diary-content h4 {
    @apply font-bold;
    color: var(--primary-accent);
  }
  
  .diary-content a {
    color: var(--secondary-accent);
  }
  
  .diary-content p {
    @apply text-base-content;
  }
  
  .diary-content hr {
    @apply border-base-300;
  }
  
  .diary-content blockquote {
    @apply bg-base-300/50 py-1 px-4 rounded-r-md italic;
    border-left: 4px solid rgba(var(--primary-accent-rgb), 0.5);
  }
  
  .diary-content code {
    @apply bg-base-300 px-1 py-0.5 rounded before:content-none after:content-none;
  }
  
  /* Code block styling */
  .diary-content pre {
    @apply bg-base-300 p-4 rounded-md overflow-x-auto border border-base-content/10;
  }
  
  /* List styling */
  .diary-content ul li::marker {
    color: var(--primary-accent);
  }
  
  .diary-content ol li::marker {
    color: var(--primary-accent);
    @apply font-bold;
  }
  
  /* Image styling */
  .diary-content img {
    @apply rounded-lg shadow-md mx-auto my-6;
  }
  
  /* Table styling */
  .diary-content table {
    @apply border-collapse my-6 w-full;
  }
  
  .diary-content th {
    @apply bg-base-300 p-2 border border-base-content/20;
  }
  
  .diary-content td {
    @apply p-2 border border-base-content/10;
  }
</style>

<style>
  [data-scroll] {
    opacity: 0;
    transform: translateY(20px);
  }
  
  [data-entry-index] {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }
  
  [data-entry-index].is-visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  .diary-entry-content {
    transition: opacity 0.5s ease;
  }
  
  /* Vertical text for mobile sidebar */
  .writing-mode-vertical {
    writing-mode: vertical-rl;
    text-orientation: mixed;
    transform: rotate(180deg);
    padding: 1rem 0;
  }
</style>