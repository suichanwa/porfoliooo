\---
import BaseLayout from "../layouts/BaseLayout.astro";
import Avatar from "../components/Avatar.tsx";
import ProfileCard from "../components/Profile/ProfileCard.tsx";
import SkillBadge from "../components/SkillBadge.tsx";
import TypeWriter from "../components/TypeWriter.tsx";

// Fetch real GitHub projects
let featuredProjects = [];
let skillsFromGitHub = [];

try {
  const username = 'suichanwa';
  const response = await fetch(`https://api.github.com/users/${username}/repos?sort=updated&per_page=100`);
  
  if (response.ok) {
    const repositories = await response.json();
    
    // Filter for best projects based on stars or recent updates
    featuredProjects = repositories
      .filter(repo => !repo.fork)
      .sort((a, b) => b.stargazers_count - a.stargazers_count)
      .slice(0, 6)
      .map(repo => ({
        id: repo.id.toString(),
        title: repo.name.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
        description: repo.description || "A cool project I've been working on",
        technologies: repo.topics || ['JavaScript', 'Web Development'],
        githubUrl: repo.html_url,
        liveUrl: repo.homepage || null,
        stars: repo.stargazers_count,
        forks: repo.forks_count
      }));

    // Extract all languages from repositories
    const languagePromises = repositories
      .filter(repo => !repo.fork && !repo.archived)
      .slice(0, 30)
      .map(async (repo) => {
        try {
          const langResponse = await fetch(`https://api.github.com/repos/${username}/${repo.name}/languages`);
          if (langResponse.ok) {
            return await langResponse.json();
          }
          return {};
        } catch (error) {
          console.error(`Error fetching languages for ${repo.name}:`, error);
          return {};
        }
      });

    const languageResults = await Promise.all(languagePromises);
    
    // Aggregate language usage
    const languageStats = {};
    languageResults.forEach(languages => {
      Object.entries(languages).forEach(([lang, bytes]) => {
        if (languageStats[lang]) {
          languageStats[lang] += bytes;
        } else {
          languageStats[lang] = bytes;
        }
      });
    });

    // Define languages to exclude
    const excludedLanguages = ['HTML', 'CSS', 'Java', 'PHP', 'GLSL', 'Vue', 'SCSS', 'C', 'Kotlin', 'Awk'];
    
    // Filter out excluded languages
    Object.keys(languageStats).forEach(language => {
      if (excludedLanguages.includes(language)) {
        delete languageStats[language];
      }
    });

    // Calculate total bytes for accurate percentages
    const totalBytes = Object.values(languageStats).reduce((sum, bytes) => sum + bytes, 0);
    
    // Create skills array with real percentages
    if (totalBytes > 0) {
      skillsFromGitHub = Object.entries(languageStats)
        .map(([language, bytes]) => {
          const actualPercentage = Math.round((bytes / totalBytes) * 100);
          return {
            name: language,
            level: Math.max(actualPercentage, 5),
            usage: bytes,
            actualPercentage: actualPercentage
          };
        })
        .sort((a, b) => b.usage - a.usage)
        .slice(0, 12);
    }

  }
} catch (error) {
  console.error('Error fetching GitHub data:', error);
}

// Fallback skills if GitHub API fails
if (skillsFromGitHub.length === 0) {
  skillsFromGitHub = [
    { name: "JavaScript", level: 45, actualPercentage: 45 },
    { name: "TypeScript", level: 35, actualPercentage: 35 },
    { name: "Python", level: 15, actualPercentage: 15 },
    { name: "Shell", level: 3, actualPercentage: 3 },
    { name: "Dockerfile", level: 1, actualPercentage: 1 },
    { name: "JSON", level: 1, actualPercentage: 1 }
  ];
}

// Fallback projects if GitHub API fails
if (featuredProjects.length === 0) {
  featuredProjects = [
    {
      id: "1",
      title: "Portfolio Website",
      description: "A modern portfolio built with Astro and React",
      technologies: ["Astro", "React", "TypeScript", "Tailwind CSS"],
      githubUrl: "https://github.com/suichanwa/portfolio",
    },
    {
      id: "2",
      title: "3D Interactive Resume",
      description: "An interactive resume with Three.js animations",
      technologies: ["Three.js", "React", "GSAP"],
      githubUrl: "https://github.com/suichanwa/3d-resume",
    }
  ];
}

// Stats with consistent styling
const stats = [
  { 
    label: "Years Coding", 
    value: "6", 
    iconSvg: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
    </svg>` 
  },
  { 
    label: "Projects Built", 
    value: "50+", 
    iconSvg: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 6.75 22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3-4.5 16.5" />
    </svg>` 
  }
];
---

<BaseLayout title="Home | My Portfolio">
  <!-- Hero Section -->
  <section id="hero-section" class="py-24 bg-primary-bg min-h-[90vh] flex items-center relative overflow-hidden">
    <div class="container max-w-6xl mx-auto px-4 relative z-10">
      <div class="flex flex-col md:flex-row items-center justify-between">
        <div class="md:w-2/3 text-center md:text-left mb-12 md:mb-0">
          <h1 class="text-4xl md:text-6xl font-bold mb-6 text-text-dark-bg min-h-[8rem] md:min-h-[12rem]">
            <TypeWriter 
              client:load 
              text="a fullstack code monkey" 
              speed={80} 
              delay={500}
              className="block bg-gradient-to-r from-primary-accent to-secondary-accent bg-clip-text text-transparent"
            />
            <TypeWriter 
              client:load 
              text="vibing n making things happen ✨" 
              speed={60}
              delay={2500}
              className="block text-xl md:text-2xl mt-4 text-secondary-accent"
            />
          </h1>
          
          <!-- Stats -->
          <div data-scroll class="flex flex-wrap justify-center md:justify-start gap-6 mb-8 opacity-0">
            {stats.map((stat, i) => (
              <div class="flex items-center gap-3 p-4 bg-base-100/10 backdrop-blur-sm rounded-lg border border-white/10 min-w-[140px]">
                <div class="text-primary-accent" set:html={stat.iconSvg}></div>
                <div class="text-center">
                  <div class="text-lg font-bold text-primary-accent">{stat.value}</div>
                  <div class="text-xs text-base-content/70">{stat.label}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div class="md:w-1/3 flex flex-col items-center">
          <div class="mb-6 p-2 rounded-full border-4 border-primary-accent shadow-2xl bg-gradient-to-br from-primary-accent/20 to-secondary-accent/20 backdrop-blur-sm">
            <Avatar client:load />
          </div>
          
          <!-- CTA Button -->
          <a 
            href="/write-letter"
            class="px-6 py-3 border-2 border-secondary-accent text-secondary-accent font-bold rounded-xl hover:bg-secondary-accent hover:text-white transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1"
          >
            <span class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 0 1-2.25 2.25h-15a2.25 2.25 0 0 1-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25m19.5 0v.243a2.25 2.25 0 0 1-1.07 1.916l-7.5 4.615a2.25 2.25 0 0 1-2.36 0L3.32 8.91a2.25 2.25 0 0 1-1.07-1.916V6.75" />
              </svg>
              Write me a letter
            </span>
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Projects Section -->
  <section id="projects" class="py-16 bg-base-100/50">
    <div class="container max-w-6xl mx-auto px-4">
      <div data-scroll class="text-center mb-12 opacity-0">
        <h2 class="text-3xl md:text-4xl font-bold text-text-dark-bg mb-4">Featured Projects</h2>
        <p class="text-lg text-base-content/70 max-w-2xl mx-auto">
          A collection of projects that showcase my technical skills and problem-solving approach.
        </p>
      </div>
      
      <div data-scroll class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 opacity-0">
        {featuredProjects.map((project, index) => (
          <div class="bg-base-200/50 backdrop-blur-sm rounded-xl border border-white/10 hover:border-primary-accent/30 transition-all duration-300 overflow-hidden">
            <div class="p-6">
              <!-- Stats badges -->
              {(project.stars !== undefined || project.forks !== undefined) && (
                <div class="flex items-center gap-2 text-xs mb-4">
                  {project.stars !== undefined && project.stars > 0 && (
                    <div class="flex items-center gap-1 px-2 py-1 bg-yellow-500/10 text-yellow-600 rounded-full">
                      <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                      </svg>
                      <span>{project.stars}</span>
                    </div>
                  )}
                  {project.forks !== undefined && project.forks > 0 && (
                    <div class="flex items-center gap-1 px-2 py-1 bg-blue-500/10 text-blue-600 rounded-full">
                      <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414L2.586 7a2 2 0 010-2.828l3.707-3.707a1 1 0 011.414 0z" clipRule="evenodd"></path>
                      </svg>
                      <span>{project.forks}</span>
                    </div>
                  )}
                </div>
              )}

              <!-- Project title and description -->
              <h3 class="text-xl font-bold text-text-dark-bg mb-2 hover:text-primary-accent transition-colors">
                {project.title}
              </h3>
              <p class="text-base-content/80 text-sm mb-4 line-clamp-2">
                {project.description}
              </p>

              <!-- Technology stack -->
              <div class="flex flex-wrap gap-1 mb-4">
                {project.technologies.slice(0, 3).map((tech) => (
                  <span class="px-2 py-1 bg-base-300/50 text-base-content/70 text-xs rounded-md">
                    {tech}
                  </span>
                ))}
                {project.technologies.length > 3 && (
                  <span class="px-2 py-1 bg-primary-accent/10 text-primary-accent text-xs rounded-md">
                    +{project.technologies.length - 3}
                  </span>
                )}
              </div>
            </div>

            <!-- Action buttons -->
            <div class="px-6 pb-6">
              <div class="flex gap-2">
                <a 
                  href={project.githubUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-base-300/50 hover:bg-base-300 text-base-content hover:text-primary-accent rounded-lg transition-all text-sm"
                >
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                  </svg>
                  Code
                </a>
                
                {project.liveUrl && (
                  <a 
                    href={project.liveUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-primary-accent hover:bg-primary-accent/90 text-white rounded-lg transition-all text-sm"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                    </svg>
                    Live
                  </a>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- View all projects link -->
      <div data-scroll class="text-center mt-12 opacity-0">
        <a 
          href="https://github.com/suichanwa"
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center gap-2 px-6 py-3 bg-base-200/50 hover:bg-base-200 text-base-content hover:text-primary-accent rounded-lg transition-all border border-white/10 hover:border-primary-accent/30"
        >
          <span>View All Projects on GitHub</span>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8l4 4m0 0l-4 4m4-4H3" />
          </svg>
        </a>
      </div>
    </div>
  </section>

  <!-- Skills Section -->
  <section id="skills" class="py-16 bg-primary-bg">
    <div class="container max-w-6xl mx-auto px-4">
      <div data-scroll class="text-center mb-12 opacity-0">
        <h2 class="text-3xl md:text-4xl font-bold text-text-dark-bg mb-4">Skills & Technologies</h2>
        <p class="text-lg text-base-content/70 max-w-2xl mx-auto">
          Things I use to bring ideas to life
        </p>
      </div>
      
      <!-- Skills Grid -->
      <div data-scroll class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4 opacity-0">
        {skillsFromGitHub.map((skill) => (
          <SkillBadge 
            client:visible 
            skill={{
              name: skill.name,
              level: skill.level
            }}
            variant="default"
            showLevel={true}
          />
        ))}
      </div>

      <!-- Language Breakdown -->
      <div data-scroll class="mt-12 opacity-0">
        <div class="bg-base-100/10 backdrop-blur-sm rounded-xl p-6 border border-white/10">
          <h3 class="text-lg font-bold text-center mb-4 text-primary-accent">Core Language Distribution</h3>
          <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
            {skillsFromGitHub.slice(0, 8).map((skill) => (
              <div class="flex justify-between items-center p-2 bg-base-200/50 rounded-lg">
                <span class="text-sm font-medium">{skill.name}</span>
                <span class="text-xs text-primary-accent font-bold">
                  {skill.actualPercentage || skill.level}%
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- GitHub Summary -->
      <div data-scroll class="mt-8 text-center opacity-0">
        <div class="inline-flex items-center gap-2 px-4 py-2 bg-base-100/10 backdrop-blur-sm rounded-full border border-white/10">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-primary-accent" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
          </svg>
          <span class="text-xs text-base-content/70">
            Live data from GitHub • Updated {new Date().toLocaleDateString()}
          </span>
        </div>
      </div>
    </div>
  </section>

  <!-- About Section -->
  <section id="about" class="py-16 bg-base-100/50">
    <div class="container max-w-6xl mx-auto px-4">
      <div data-scroll class="max-w-3xl mx-auto text-center opacity-0">
        <h2 class="text-3xl md:text-4xl font-bold text-text-dark-bg mb-8">About Me</h2>
        <ProfileCard client:visible />
      </div>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const scrollElements = document.querySelectorAll('[data-scroll]');
      
      const elementInView = (el: Element, dividend = 1) => {
        const elementTop = el.getBoundingClientRect().top;
        return (
          elementTop <= 
          (window.innerHeight || document.documentElement.clientHeight) / dividend
        );
      };
      
      const displayScrollElement = (element: HTMLElement) => {
        element.style.opacity = '1';
        element.style.transform = 'translateY(0)';
      };
      
      const hideScrollElement = (element: HTMLElement) => {
        element.style.opacity = '0';
        element.style.transform = 'translateY(20px)';
      };
      
      const handleScrollAnimation = () => {
        scrollElements.forEach((el) => {
          const htmlEl = el as HTMLElement;
          if (elementInView(el, 1.25)) {
            displayScrollElement(htmlEl);
          } else {
            hideScrollElement(htmlEl);
          }
        });
      };
      
      scrollElements.forEach(el => {
        const htmlEl = el as HTMLElement;
        htmlEl.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      });
      
      window.addEventListener('scroll', () => {
        handleScrollAnimation();
      });
      
      handleScrollAnimation();
    });
  </script>
</BaseLayout>

<style>
  [data-scroll] {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }
</style>