---
import BaseLayout from "../layouts/BaseLayout.astro";
import Avatar from "../components/Avatar.tsx";
import ProfileCard from "../components/Profile/ProfileCard.tsx";
import ProjectCard from "../components/ProjectCard.tsx";
import SkillBadge from "../components/SkillBadge.tsx";
import TypeWriter from "../components/TypeWriter.tsx";
import StarryBackground from "../components/StarryBackground.tsx";

// Fetch real GitHub projects
let featuredProjects = [];
try {
  const username = 'suichanwa';
  const response = await fetch(`https://api.github.com/users/${username}/repos?sort=updated&per_page=100`);
  
  if (response.ok) {
    const repositories = await response.json();
    
    // Filter for best projects based on stars or recent updates
    featuredProjects = repositories
      .filter(repo => !repo.fork) // Excluding forks
      .sort((a, b) => b.stargazers_count - a.stargazers_count) // Sort by stars
      .slice(0, 4) // Get top 4
      .map(repo => ({
        id: repo.id.toString(),
        title: repo.name.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
        description: repo.description || "A cool project I've been working on",
        technologies: repo.topics || ['JavaScript', 'Web Development'],
        githubUrl: repo.html_url,
        liveUrl: repo.homepage || null,
        stars: repo.stargazers_count,
        forks: repo.forks_count
      }));
  }
} catch (error) {
  console.error('Error fetching GitHub projects:', error);
  
  // Fallback projects if GitHub API fails
  featuredProjects = [
    {
      id: "1",
      title: "Portfolio Website",
      description: "A modern portfolio built with Astro and React",
      technologies: ["Astro", "React", "TypeScript", "Tailwind CSS"],
      githubUrl: "https://github.com/suichanwa/portfolio",
    },
    {
      id: "2",
      title: "3D Interactive Resume",
      description: "An interactive resume with Three.js animations",
      technologies: ["Three.js", "React", "GSAP"],
      githubUrl: "https://github.com/suichanwa/3d-resume",
    }
  ];
}

// Updated stats - Only years coding and projects built with icons
const stats = [
  { 
    label: "Years Coding", 
    value: "6", 
    iconSvg: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
    </svg>` 
  },
  { 
    label: "Projects Built", 
    value: "50+", 
    iconSvg: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 6.75 22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3-4.5 16.5" />
    </svg>` 
  }
];
---

<BaseLayout title="Home | My Portfolio">
  <!-- Starry Background Component -->
  <StarryBackground client:load />

  <!-- Hero Section with Starry Theme -->
  <section id="hero-section" class="py-24 bg-primary-bg min-h-[90vh] flex items-center relative overflow-hidden gui-element">
    <div class="container max-w-6xl mx-auto px-4 relative z-10">
      <div class="flex flex-col md:flex-row items-center justify-between">
        <div class="md:w-2/3 text-center md:text-left mb-12 md:mb-0">
          <h1 class="text-4xl md:text-6xl font-bold mb-6 text-text-dark-bg min-h-[8rem] md:min-h-[12rem]">
            <TypeWriter 
              client:load 
              text="a fullstack code monkey" 
              speed={80} 
              delay={500}
              className="block bg-gradient-to-r from-primary-accent to-secondary-accent bg-clip-text text-transparent"
            />
            <TypeWriter 
              client:load 
              text="vibing n making things happen ✨" 
              speed={60}
              delay={2500}
              className="block text-xl md:text-2xl mt-4 text-secondary-accent"
            />
          </h1>
          
          <!-- Quick Stats - Only 2 badges now with icons -->
          <div data-stats class="hidden flex flex-wrap justify-center md:justify-start gap-6 mb-8 opacity-0">
            {stats.map((stat, i) => (
              <div class="flex items-center gap-3 p-4 bg-base-100/10 backdrop-blur-sm rounded-lg border border-white/10 min-w-[140px]">
                <div class="text-primary-accent" set:html={stat.iconSvg}></div>
                <div class="text-center">
                  <div class="text-lg font-bold text-primary-accent">{stat.value}</div>
                  <div class="text-xs text-base-content/70">{stat.label}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div class="md:w-1/3 flex flex-col items-center">
          <div class="mb-6 p-2 rounded-full border-4 border-primary-accent shadow-2xl bg-gradient-to-br from-primary-accent/20 to-secondary-accent/20 backdrop-blur-sm">
            <Avatar client:load />
          </div>
          
          <!-- Write me a letter button -->
          <a 
            href="/write-letter"
            class="group relative px-6 py-3 border-2 border-secondary-accent text-secondary-accent font-bold rounded-xl hover:bg-secondary-accent hover:text-white transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1"
          >
            <span class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 0 1-2.25 2.25h-15a2.25 2.25 0 0 1-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25m19.5 0v.243a2.25 2.25 0 0 1-1.07 1.916l-7.5 4.615a2.25 2.25 0 0 1-2.36 0L3.32 8.91a2.25 2.25 0 0 1-1.07-1.916V6.75" />
              </svg>
              Write me a letter
            </span>
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Projects Section -->
  <section id="projects" class="py-16 bg-base-100/50 gui-element">
    <div class="container max-w-6xl mx-auto px-4">
      <div data-scroll class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-bold text-text-dark-bg mb-4">Featured Projects</h2>
        <p class="text-lg text-base-content/70 max-w-2xl mx-auto">
          Here are some of my recent projects that showcase my skills and passion for development.
        </p>
      </div>
      
      <div data-scroll class="grid md:grid-cols-2 gap-8">
        {featuredProjects.map((project, index) => (
          <div class="project-card">
            <ProjectCard 
              client:visible
              title={project.title}
              description={project.description}
              technologies={project.technologies}
              githubUrl={project.githubUrl}
              liveUrl={project.liveUrl}
              stars={project.stars}
              forks={project.forks}
            />
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Skills Section -->
  <section id="skills" class="py-16 bg-primary-bg gui-element">
    <div class="container max-w-6xl mx-auto px-4">
      <div data-scroll class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-bold text-text-dark-bg mb-4">Skills & Technologies</h2>
        <p class="text-lg text-base-content/70 max-w-2xl mx-auto">
          Technologies I work with to bring ideas to life.
        </p>
      </div>
      
      <div data-scroll class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
        {[
          "React", "TypeScript", "Node.js", "Python", "JavaScript", "HTML/CSS",
          "Astro", "Tailwind CSS", "Git", "MongoDB", "PostgreSQL", "Docker"
        ].map((skill) => (
          <SkillBadge client:visible skill={skill} />
        ))}
      </div>
    </div>
  </section>

  <!-- About Section -->
  <section id="about" class="py-16 bg-base-100/50 gui-element">
    <div class="container max-w-6xl mx-auto px-4">
      <div data-scroll class="max-w-3xl mx-auto text-center">
        <h2 class="text-3xl md:text-4xl font-bold text-text-dark-bg mb-8">About Me</h2>
        <ProfileCard client:visible />
      </div>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Elements to observe for scroll animation
      const scrollElements = document.querySelectorAll('[data-scroll]');
      
      const elementInView = (el: Element, dividend = 1) => {
        const elementTop = el.getBoundingClientRect().top;
        return (
          elementTop <= 
          (window.innerHeight || document.documentElement.clientHeight) / dividend
        );
      };
      
      const displayScrollElement = (element: HTMLElement) => {
        element.style.opacity = '1';
        element.style.transform = 'translateY(0)';
      };
      
      const hideScrollElement = (element: HTMLElement) => {
        element.style.opacity = '0';
        element.style.transform = 'translateY(20px)';
      };
      
      const handleScrollAnimation = () => {
        scrollElements.forEach((el) => {
          const htmlEl = el as HTMLElement;
          if (elementInView(el, 1.25)) {
            displayScrollElement(htmlEl);
          } else {
            hideScrollElement(htmlEl);
          }
        });
      };
      
      scrollElements.forEach(el => {
        const htmlEl = el as HTMLElement;
        htmlEl.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      });
      
      window.addEventListener('scroll', () => {
        handleScrollAnimation();
      });
      
      handleScrollAnimation();
    });
  </script>
</BaseLayout>

<style>
  [data-scroll] {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .gui-element {
    transition: opacity 0.5s ease, transform 0.5s ease, pointer-events 0s ease 0.5s;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Add some cosmic floating animation */
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
  }

  /* Gradient text animation */
  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
</style>