---
import BaseLayout from "../layouts/BaseLayout.astro";
import TypeWriter from "../components/TypeWriter.tsx";
import { getLetters, type Letter } from "../utils/firebaseConfig";

// Fetch letters from Firebase
let visitorLetters: Letter[] = [];
let isLoading = true;
let errorMessage = "";

try {
  // Fetch letters from Firebase
  visitorLetters = await getLetters();
  isLoading = false;
} catch (error) {
  console.error("Error fetching letters:", error);
  errorMessage = "There was an error fetching messages. Please try again later.";
  isLoading = false;
}
---

<BaseLayout title="Letters from Visitors | My Portfolio">
  <section class="py-12 md:py-16 max-w-3xl mx-auto">
    <div data-scroll class="opacity-0">
      <h1 class="text-3xl md:text-4xl font-bold text-center mb-6 min-h-[3.5rem]">
        <TypeWriter 
          client:load 
          text="Letters from Visitors" 
          speed={100} 
          delay={300}
        />
      </h1>
      <div class="w-24 h-1 bg-primary-accent mx-auto mb-6"></div>
      
      <p class="text-center mb-12 max-w-xl mx-auto">
        These are notes and messages people have sent me. Each one means a lot to me!
        <a href="/write-letter" class="block mt-2 text-secondary-accent hover:underline">Want to send me one too?</a>
      </p>
    </div>
    
    {/* Loading state */}
    {isLoading && (
      <div data-scroll class="opacity-0 flex justify-center py-12">
        <div class="loading loading-dots loading-lg text-primary-accent"></div>
      </div>
    )}
    
    {/* Error state */}
    {errorMessage && (
      <div data-scroll class="opacity-0 text-center p-8 bg-error/10 rounded-xl">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-4 text-error" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
        <p class="text-lg font-medium text-error">{errorMessage}</p>
        <button 
          class="mt-4 btn btn-error btn-outline"
          onclick="window.location.reload();"
        >
          Try Again
        </button>
      </div>
    )}
    
    {/* Letters from Firebase */}
    {!isLoading && !errorMessage && (
      <div class="space-y-8">
        {visitorLetters.map((letter, i) => (
          <div 
            data-scroll 
            data-scroll-delay={i * 0.1} 
            class="opacity-0"
          >
            <div class="bg-base-200 p-6 rounded-xl shadow-lg border-l-4 border-secondary-accent/50">
              <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-medium text-primary-accent">
                  {letter.name || "Anonymous"}
                </h2>
                <span class="text-sm text-secondary-accent">
                  {typeof letter.date === 'string' ? letter.date : letter.date instanceof Date ? letter.date.toLocaleDateString() : 
                  letter.date && typeof letter.date === 'object' && 'toDate' in letter.date ? letter.date.toDate().toLocaleDateString() : 'Unknown date'}
                </span>
              </div>
              
              <div class="relative pl-6 leading-relaxed">
                <div class="absolute left-0 top-0 text-4xl text-secondary-accent/30 font-serif">"</div>
                <p class="italic">{letter.message}</p>
                <div class="absolute right-0 bottom-0 text-4xl text-secondary-accent/30 font-serif">"</div>
              </div>
            </div>
          </div>
        ))}
        
        {visitorLetters.length === 0 && (
          <div data-scroll data-scroll-delay="0.2" class="opacity-0 text-center p-12">
            <div class="text-5xl mb-4">ðŸ“­</div>
            <p class="text-lg text-base-content/70">No letters yet</p>
            <a 
              href="/write-letter" 
              class="mt-4 inline-block px-6 py-2 bg-primary-accent text-white rounded-lg hover:bg-primary-accent/90 transition"
            >
              Send the first one
            </a>
          </div>
        )}
      </div>
    )}
  </section>

  <script>
    // Reuse the same scroll animation logic
    document.addEventListener('DOMContentLoaded', () => {
      const scrollElements = document.querySelectorAll('[data-scroll]');
      
      const elementInView = (el, scrollOffset = 0) => {
        const elementTop = el.getBoundingClientRect().top;
        return (
          elementTop <= 
          (window.innerHeight || document.documentElement.clientHeight) * 0.8
        );
      };
      
      const displayScrollElement = (element) => {
        const delay = element.dataset.scrollDelay || 0;
        setTimeout(() => {
          element.classList.add('motion-safe:animate-fadeIn');
          element.style.opacity = 1;
          element.style.transform = 'translateY(0)';
        }, delay * 1000);
      };
      
      const hideScrollElement = (element) => {
        element.style.opacity = 0;
        element.style.transform = 'translateY(20px)';
      };
      
      const handleScrollAnimation = () => {
        scrollElements.forEach((el) => {
          if (elementInView(el, 100)) {
            displayScrollElement(el);
          } else {
            hideScrollElement(el);
          }
        });
      };
      
      // Add smooth transition for scroll elements
      scrollElements.forEach(el => {
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      });
      
      window.addEventListener('scroll', () => {
        handleScrollAnimation();
      });
      
      // Initial check
      handleScrollAnimation();
    });
  </script>
</BaseLayout>

<style>
  [data-scroll] {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }
</style>