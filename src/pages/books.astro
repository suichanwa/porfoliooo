---
import BaseLayout from "../layouts/BaseLayout.astro";
import TypeWriter from "../components/TypeWriter.tsx";
import BookCard from "../components/BookCard.tsx";
import { getBooks, type Book } from "../utils/firebaseConfig";

// Get books from Firebase instead of scanning files
let books: Book[] = [];
let isLoading = true;
let errorMessage = "";

try {
  books = await getBooks();
  isLoading = false;
} catch (error) {
  console.error("Error fetching books:", error);
  errorMessage = "Failed to load books. Please try again later.";
  isLoading = false;
}
---

<BaseLayout title="My Book Collection | My Portfolio">
  <section class="py-12 md:py-16 max-w-6xl mx-auto">
    <!-- Header -->
    <div data-scroll class="opacity-0">
      <h1 class="text-3xl md:text-4xl font-bold text-center mb-6 min-h-[3.5rem]">
        <TypeWriter 
          client:load 
          text="My Book Collection" 
          speed={100} 
          delay={300}
        />
      </h1>
      <div class="w-24 h-1 bg-primary-accent mx-auto mb-6"></div>
      
      <p class="text-center mb-12 max-w-2xl mx-auto text-base-content/70">
        Books that shaped my thinking as a developer. Each one comes with my personal thoughts, 
        and you can read them right here with your reading progress automatically saved to the cloud!
      </p>
      
      {books.length > 0 && (
        <div class="text-center mb-8">
          <span class="badge badge-lg badge-outline">
            üìö {books.length} books in collection
          </span>
        </div>
      )}
    </div>

    <!-- Error State -->
    {errorMessage && (
      <div class="text-center p-12 bg-error/10 rounded-xl">
        <div class="text-6xl mb-4">üòï</div>
        <h3 class="text-xl font-bold mb-2 text-error">Oops!</h3>
        <p class="text-base-content/70">{errorMessage}</p>
      </div>
    )}

    <!-- Books Grid -->
    {!errorMessage && (
      <div data-scroll data-scroll-delay="0.1" class="opacity-0">
        {books.length > 0 ? (
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {books.map((book, i) => (
              <div 
                data-scroll 
                data-scroll-delay={i * 0.1} 
                class="opacity-0"
              >
                <BookCard book={book} client:load />
              </div>
            ))}
          </div>
        ) : (
          <div class="text-center p-12 bg-base-200 rounded-xl">
            <div class="text-6xl mb-4">üìö</div>
            <h3 class="text-xl font-bold mb-2 text-base-content">No books found</h3>
            <p class="text-base-content/70 mb-6">
              Books will be loaded from Firebase. Add some books to see them here!
            </p>
          </div>
        )}
      </div>
    )}

    <!-- Firebase Features Info -->
    <div data-scroll data-scroll-delay="0.3" class="opacity-0 mt-16 bg-base-200 p-6 rounded-xl">
      <h3 class="text-lg font-bold mb-4 text-center" style="color: var(--primary-accent)">
        ‚òÅÔ∏è Cloud-Powered Features
      </h3>
      <div class="grid md:grid-cols-3 gap-6 text-sm">
        <div>
          <h4 class="font-medium mb-2">üî• Firebase Storage:</h4>
          <ul class="list-disc list-inside space-y-1 text-base-content/70">
            <li>Books stored in Firestore database</li>
            <li>PDFs hosted on Firebase Storage</li>
            <li>Automatic cover generation</li>
            <li>Real-time synchronization</li>
          </ul>
        </div>
        <div>
          <h4 class="font-medium mb-2">üìñ Smart Reading:</h4>
          <ul class="list-disc list-inside space-y-1 text-base-content/70">
            <li>Cloud-saved reading progress</li>
            <li>Cross-device synchronization</li>
            <li>Dedicated reading pages</li>
            <li>Auto-bookmark system</li>
          </ul>
        </div>
        <div>
          <h4 class="font-medium mb-2">üöÄ Production Ready:</h4>
          <ul class="list-disc list-inside space-y-1 text-base-content/70">
            <li>Deployed on Firebase Hosting</li>
            <li>CDN-delivered content</li>
            <li>Scalable architecture</li>
            <li>Global availability</li>
          </ul>
        </div>
      </div>
    </div>
  </section>

  <!-- Scroll animations script -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const scrollElements = document.querySelectorAll('[data-scroll]');
      
      const elementInView = (el, scrollOffset = 0) => {
        const elementTop = el.getBoundingClientRect().top;
        return (
          elementTop <= 
          (window.innerHeight || document.documentElement.clientHeight) * 0.8
        );
      };
      
      const displayScrollElement = (element) => {
        const delay = element.dataset.scrollDelay || 0;
        setTimeout(() => {
          element.classList.add('motion-safe:animate-fadeIn');
          element.style.opacity = 1;
          element.style.transform = 'translateY(0)';
        }, delay * 1000);
      };
      
      const hideScrollElement = (element) => {
        element.style.opacity = 0;
        element.style.transform = 'translateY(20px)';
      };
      
      const handleScrollAnimation = () => {
        scrollElements.forEach((el) => {
          if (elementInView(el, 100)) {
            displayScrollElement(el);
          } else {
            hideScrollElement(el);
          }
        });
      };
      
      scrollElements.forEach(el => {
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      });
      
      window.addEventListener('scroll', () => {
        handleScrollAnimation();
      });
      
      handleScrollAnimation();
    });
  </script>
</BaseLayout>

<style>
  [data-scroll] {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }
</style>