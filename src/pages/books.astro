---
import BaseLayout from "../layouts/BaseLayout.astro";
import TypeWriter from "../components/TypeWriter.tsx";
import BookCard from "../components/BookCard.tsx";

// Define your book collection
const books = [
  {
    id: "clean-code",
    title: "Clean Code",
    author: "Robert C. Martin",
    coverImage: "/images/books/clean-code.jpg", // You'll need to add book covers
    pdfUrl: "/pdfs/clean-code.pdf", // You'll need to add PDFs to public/pdfs/
    description: "A handbook of agile software craftsmanship",
    genre: "Programming",
    year: 2008,
    pages: 464,
    myThoughts: `
      This book completely changed how I think about writing code. Martin's emphasis on 
      readability and maintainability resonates deeply with me. The examples are practical 
      and the principles are timeless.
      
      Key takeaways:
      - Code should be readable like prose
      - Functions should be small and do one thing
      - Comments should explain why, not what
      
      Would definitely recommend to any developer looking to level up their craft.
    `,
    rating: 5,
    dateRead: "2024-03-15",
    tags: ["programming", "best-practices", "software-engineering"]
  },
  {
    id: "design-patterns",
    title: "Design Patterns",
    author: "Gang of Four",
    coverImage: "/images/books/design-patterns.jpg",
    pdfUrl: "/pdfs/design-patterns.pdf",
    description: "Elements of Reusable Object-Oriented Software",
    genre: "Programming",
    year: 1994,
    pages: 395,
    myThoughts: `
      A classic that every developer should read at least once. While some patterns 
      feel dated in modern JavaScript/TypeScript, the core concepts are invaluable.
      
      The Observer and Factory patterns have been particularly useful in my React projects.
      Sometimes I catch myself overengineering though - not every problem needs a pattern!
    `,
    rating: 4,
    dateRead: "2024-01-20",
    tags: ["programming", "design-patterns", "oop"]
  }
];
---

<BaseLayout title="My Book Collection | My Portfolio">
  <section class="py-12 md:py-16 max-w-6xl mx-auto">
    <!-- Header -->
    <div data-scroll class="opacity-0">
      <h1 class="text-3xl md:text-4xl font-bold text-center mb-6 min-h-[3.5rem]">
        <TypeWriter 
          client:load 
          text="My Book Collection" 
          speed={100} 
          delay={300}
        />
      </h1>
      <div class="w-24 h-1 bg-primary-accent mx-auto mb-6"></div>
      
      <p class="text-center mb-12 max-w-2xl mx-auto text-base-content/70">
        Books that shaped my thinking as a developer. Each one comes with my personal thoughts and takeaways.
      </p>
    </div>

    <!-- Books Grid -->
    <div data-scroll data-scroll-delay="0.1" class="opacity-0">
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {books.map((book, i) => (
          <div 
            data-scroll 
            data-scroll-delay={i * 0.1} 
            class="opacity-0"
          >
            <BookCard book={book} client:load />
          </div>
        ))}
      </div>
      
      {books.length === 0 && (
        <div class="text-center p-12 bg-base-200 rounded-xl">
          <div class="text-5xl mb-4">ðŸ“š</div>
          <p class="text-lg text-base-content/70">No books added yet</p>
          <p class="text-sm text-base-content/50 mt-2">Check back soon for my reading collection!</p>
        </div>
      )}
    </div>
  </section>

  <script>
    // Scroll animations
    document.addEventListener('DOMContentLoaded', () => {
      const scrollElements = document.querySelectorAll('[data-scroll]');
      
      const elementInView = (el, scrollOffset = 0) => {
        const elementTop = el.getBoundingClientRect().top;
        return (
          elementTop <= 
          (window.innerHeight || document.documentElement.clientHeight) * 0.8
        );
      };
      
      const displayScrollElement = (element) => {
        const delay = element.dataset.scrollDelay || 0;
        setTimeout(() => {
          element.classList.add('motion-safe:animate-fadeIn');
          element.style.opacity = 1;
          element.style.transform = 'translateY(0)';
        }, delay * 1000);
      };
      
      const hideScrollElement = (element) => {
        element.style.opacity = 0;
        element.style.transform = 'translateY(20px)';
      };
      
      const handleScrollAnimation = () => {
        scrollElements.forEach((el) => {
          if (elementInView(el, 100)) {
            displayScrollElement(el);
          } else {
            hideScrollElement(el);
          }
        });
      };
      
      scrollElements.forEach(el => {
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      });
      
      window.addEventListener('scroll', () => {
        handleScrollAnimation();
      });
      
      handleScrollAnimation();
    });
  </script>
</BaseLayout>

<style>
  [data-scroll] {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }
</style>